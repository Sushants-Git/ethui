/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ScriptInputsStruct = {
  pub_a_x: BytesLike;
  pub_a_y: BytesLike;
  pub_c_x: BytesLike;
  pub_c_y: BytesLike;
  cipher: BytesLike;
};

export type ScriptInputsStructOutput = [
  pub_a_x: string,
  pub_a_y: string,
  pub_c_x: string,
  pub_c_y: string,
  cipher: string
] & {
  pub_a_x: string;
  pub_a_y: string;
  pub_c_x: string;
  pub_c_y: string;
  cipher: string;
};

export interface BitMixVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bitmixProgramVKey"
      | "citraLightClient"
      | "verifier"
      | "verifyBitMixProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bitmixProgramVKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "citraLightClient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyBitMixProof",
    values: [BytesLike, BytesLike, [BigNumberish]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bitmixProgramVKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "citraLightClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyBitMixProof",
    data: BytesLike
  ): Result;
}

export interface BitMixVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): BitMixVerifier;
  waitForDeployment(): Promise<this>;

  interface: BitMixVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bitmixProgramVKey: TypedContractMethod<[], [string], "view">;

  citraLightClient: TypedContractMethod<[], [string], "view">;

  verifier: TypedContractMethod<[], [string], "view">;

  verifyBitMixProof: TypedContractMethod<
    [
      _publicValues: BytesLike,
      _proofBytes: BytesLike,
      blockNumbers: [BigNumberish]
    ],
    [ScriptInputsStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bitmixProgramVKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "citraLightClient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyBitMixProof"
  ): TypedContractMethod<
    [
      _publicValues: BytesLike,
      _proofBytes: BytesLike,
      blockNumbers: [BigNumberish]
    ],
    [ScriptInputsStructOutput],
    "view"
  >;

  filters: {};
}
