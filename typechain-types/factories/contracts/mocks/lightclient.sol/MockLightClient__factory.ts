/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockLightClient,
  MockLightClientInterface,
} from "../../../../contracts/mocks/lightclient.sol/MockLightClient";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "bitcoin_blockhash",
        type: "bytes32",
      },
    ],
    name: "hasBlockhash",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636823918c14602d575b600080fd5b603e60383660046052565b50600190565b604051901515815260200160405180910390f35b600060208284031215606357600080fd5b503591905056fea2646970667358221220bddfa57bf44b958639cf31ec079326d3a5defde9c1ac97f73e31e6cb7e610cfe64736f6c63430008180033";

type MockLightClientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLightClientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLightClient__factory extends ContractFactory {
  constructor(...args: MockLightClientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockLightClient & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockLightClient__factory {
    return super.connect(runner) as MockLightClient__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLightClientInterface {
    return new Interface(_abi) as MockLightClientInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockLightClient {
    return new Contract(address, _abi, runner) as unknown as MockLightClient;
  }
}
