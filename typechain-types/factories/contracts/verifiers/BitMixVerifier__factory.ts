/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BitMixVerifier,
  BitMixVerifierInterface,
} from "../../../contracts/verifiers/BitMixVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_bitmixProgramVKey",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bitmixProgramVKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "citraLightClient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_publicValues",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_proofBytes",
        type: "bytes",
      },
      {
        internalType: "uint256[1]",
        name: "blockNumbers",
        type: "uint256[1]",
      },
    ],
    name: "verifyBitMixProof",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "pub_a_x",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "pub_a_y",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "pub_c_x",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "pub_c_y",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "cipher",
            type: "bytes",
          },
        ],
        internalType: "struct ScriptInputs",
        name: "inps",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161081438038061081483398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155600255610092565b6000806040838503121561006b57600080fd5b82516001600160a01b038116811461008257600080fd5b6020939093015192949293505050565b610773806100a16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632b7ac3f3146100515780634fee3eb21461008157806370fa4cd214610098578063ee2e9eb8146100b8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a60025481565b604051908152602001610078565b6100ab6100a63660046103ad565b6100cb565b6040516100789190610432565b600154610064906001600160a01b031681565b6040805160a0810182526000808252602082018190528183018190526060808301829052608083015254600254925163020a49e360e51b815291926001600160a01b03909116916341493c609161012c918a908a908a908a906004016104db565b60006040518083038186803b15801561014457600080fd5b505afa158015610158573d6000803e3d6000fd5b506000925061016c91505086880188610603565b8051516040805160208101929092529192506101a29161019b910160405160208183030381529060405261029d565b6020015190565b6001546040516334cdf78d60e01b8152853560048201526001600160a01b03909116906334cdf78d90602401602060405180830381865afa1580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f91906106fd565b146102565760405162461bcd60e51b8152602060048201526013602482015272109b1bd8dac8191bd95cdb9bdd08195e1a5cdd606a1b604482015260640160405180910390fd5b6040518060a00160405280826020015181526020018260400151815260200182606001518152602001826080015181526020018260a0015181525091505095945050505050565b805160609060008167ffffffffffffffff8111156102bd576102bd610514565b6040519080825280601f01601f1916602001820160405280156102e7576020820181803683370190505b50905060005b8281101561035c57848181518110610307576103076106e7565b01602001516001600160f81b0319168260016103238487610716565b61032d9190610716565b8151811061033d5761033d6106e7565b60200101906001600160f81b031916908160001a9053506001016102ed565b509392505050565b60008083601f84011261037657600080fd5b50813567ffffffffffffffff81111561038e57600080fd5b6020830191508360208285010111156103a657600080fd5b9250929050565b6000806000806000606086880312156103c557600080fd5b853567ffffffffffffffff808211156103dd57600080fd5b6103e989838a01610364565b9097509550602088013591508082111561040257600080fd5b5061040f88828901610364565b9094509250506060860187101561042557600080fd5b5092959194509260400190565b6000602080835283516020840152602084015160408401526040840151606084015260608401516080840152608084015160a08085015280518060c086015260005b818110156104905782810184015186820160e001528301610474565b50600060e0828701015260e0601f19601f830116860101935050505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8581526060602082015260006104f56060830186886104b2565b82810360408401526105088185876104b2565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561054d5761054d610514565b60405290565b6040516020810167ffffffffffffffff8111828210171561054d5761054d610514565b600082601f83011261058757600080fd5b813567ffffffffffffffff808211156105a2576105a2610514565b604051601f8301601f19908116603f011681019082821181831017156105ca576105ca610514565b816040528381528660208588010111156105e357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602080838503121561061657600080fd5b823567ffffffffffffffff8082111561062e57600080fd5b9084019060c0828703121561064257600080fd5b61064a61052a565b86601f84011261065957600080fd5b610661610553565b80602085018981111561067357600080fd5b855b8181101561068c5780358452928701928701610675565b508184528035602085015250505060408301356040820152606083013560608201526080830135608082015260a08301359350818411156106cc57600080fd5b6106d887858501610576565b60a08201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561070f57600080fd5b5051919050565b8181038181111561073757634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220d84bc6333ac58a55d304d5b72bfe171f1a9d0606c42cb193618fe7767676346f64736f6c63430008180033";

type BitMixVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BitMixVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BitMixVerifier__factory extends ContractFactory {
  constructor(...args: BitMixVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    _bitmixProgramVKey: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _verifier,
      _bitmixProgramVKey,
      overrides || {}
    );
  }
  override deploy(
    _verifier: AddressLike,
    _bitmixProgramVKey: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _verifier,
      _bitmixProgramVKey,
      overrides || {}
    ) as Promise<
      BitMixVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BitMixVerifier__factory {
    return super.connect(runner) as BitMixVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BitMixVerifierInterface {
    return new Interface(_abi) as BitMixVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BitMixVerifier {
    return new Contract(address, _abi, runner) as unknown as BitMixVerifier;
  }
}
