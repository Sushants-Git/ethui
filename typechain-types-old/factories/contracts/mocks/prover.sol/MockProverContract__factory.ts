/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockProverContract,
  MockProverContractInterface,
} from "../../../../contracts/mocks/prover.sol/MockProverContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "inputs",
        type: "bytes",
      },
    ],
    name: "prove",
    outputs: [
      {
        internalType: "bytes32",
        name: "bitcoin_blockhash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "cipherText",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea19174314610030575b600080fd5b61004c61003e366004610106565b815160209092019190912091565b60405161005a92919061016a565b60405180910390f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261008a57600080fd5b813567ffffffffffffffff808211156100a5576100a5610063565b604051601f8301601f19908116603f011681019082821181831017156100cd576100cd610063565b816040528381528660208588010111156100e657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561011957600080fd5b823567ffffffffffffffff8082111561013157600080fd5b61013d86838701610079565b9350602085013591508082111561015357600080fd5b5061016085828601610079565b9150509250929050565b8281526000602060406020840152835180604085015260005b8181101561019f57858101830151858201606001528201610183565b506000606082860101526060601f19601f83011685010192505050939250505056fea264697066735822122008ad62a8886b6b69958dfc2503fe8c6e8d64a0e85b0eaf395e67f8da7f012ec864736f6c63430008180033";

type MockProverContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockProverContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockProverContract__factory extends ContractFactory {
  constructor(...args: MockProverContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockProverContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockProverContract__factory {
    return super.connect(runner) as MockProverContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockProverContractInterface {
    return new Interface(_abi) as MockProverContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockProverContract {
    return new Contract(address, _abi, runner) as unknown as MockProverContract;
  }
}
