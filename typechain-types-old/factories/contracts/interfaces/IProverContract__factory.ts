/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IProverContract,
  IProverContractInterface,
} from "../../../contracts/interfaces/IProverContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "inputs",
        type: "bytes",
      },
    ],
    name: "prove",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockhash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "cipherText",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IProverContract__factory {
  static readonly abi = _abi;
  static createInterface(): IProverContractInterface {
    return new Interface(_abi) as IProverContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IProverContract {
    return new Contract(address, _abi, runner) as unknown as IProverContract;
  }
}
